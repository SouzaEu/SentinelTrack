-- Criação das tabelas
CREATE TABLE TB_USUARIO (
    ID_USUARIO NUMBER PRIMARY KEY,
    NM_USUARIO VARCHAR2(100) NOT NULL,
    DS_EMAIL VARCHAR2(100) NOT NULL,
    DS_SENHA VARCHAR2(100) NOT NULL,
    DT_CRIACAO TIMESTAMP DEFAULT SYSDATE
);

CREATE TABLE TB_LOCAL (
    ID_LOCAL NUMBER PRIMARY KEY,
    NM_LOCAL VARCHAR2(100) NOT NULL,
    DS_ENDERECO VARCHAR2(200),
    DS_CIDADE VARCHAR2(100),
    DS_ESTADO VARCHAR2(2)
);

CREATE TABLE TB_ATIVO (
    ID_ATIVO NUMBER PRIMARY KEY,
    NM_ATIVO VARCHAR2(100) NOT NULL,
    DS_TIPO VARCHAR2(50),
    DS_STATUS VARCHAR2(20),
    ID_LOCAL NUMBER,
    FOREIGN KEY (ID_LOCAL) REFERENCES TB_LOCAL(ID_LOCAL)
);

CREATE TABLE TB_INCIDENTE (
    ID_INCIDENTE NUMBER PRIMARY KEY,
    DS_TITULO VARCHAR2(100) NOT NULL,
    DS_DESCRICAO VARCHAR2(4000),
    NR_SEVERIDADE NUMBER NOT NULL,
    DS_STATUS VARCHAR2(20),
    DS_TIPO VARCHAR2(50),
    DT_OCORRENCIA TIMESTAMP,
    DT_RESOLUCAO TIMESTAMP,
    DT_CRIACAO TIMESTAMP NOT NULL,
    DT_ATUALIZACAO TIMESTAMP,
    ID_USUARIO NUMBER NOT NULL,
    ID_LOCAL NUMBER NOT NULL,
    FOREIGN KEY (ID_USUARIO) REFERENCES TB_USUARIO(ID_USUARIO),
    FOREIGN KEY (ID_LOCAL) REFERENCES TB_LOCAL(ID_LOCAL)
);

CREATE TABLE TB_INCIDENTE_ATIVO (
    ID_INCIDENTE NUMBER,
    ID_ATIVO NUMBER,
    PRIMARY KEY (ID_INCIDENTE, ID_ATIVO),
    FOREIGN KEY (ID_INCIDENTE) REFERENCES TB_INCIDENTE(ID_INCIDENTE),
    FOREIGN KEY (ID_ATIVO) REFERENCES TB_ATIVO(ID_ATIVO)
);

CREATE TABLE TB_ALERTA (
    ID_ALERTA NUMBER PRIMARY KEY,
    DS_TITULO VARCHAR2(100) NOT NULL,
    DS_MENSAGEM VARCHAR2(4000),
    DT_CRIACAO TIMESTAMP NOT NULL,
    ID_INCIDENTE NUMBER NOT NULL,
    FOREIGN KEY (ID_INCIDENTE) REFERENCES TB_INCIDENTE(ID_INCIDENTE)
);

-- Sequences
CREATE SEQUENCE SEQ_USUARIO START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_LOCAL START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_ATIVO START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_INCIDENTE START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_ALERTA START WITH 1 INCREMENT BY 1;

-- Inserção de dados de exemplo
INSERT INTO TB_USUARIO (ID_USUARIO, NM_USUARIO, DS_EMAIL, DS_SENHA) VALUES (SEQ_USUARIO.NEXTVAL, 'João Silva', 'joao@email.com', 'senha123');
INSERT INTO TB_USUARIO (ID_USUARIO, NM_USUARIO, DS_EMAIL, DS_SENHA) VALUES (SEQ_USUARIO.NEXTVAL, 'Maria Santos', 'maria@email.com', 'senha456');
INSERT INTO TB_USUARIO (ID_USUARIO, NM_USUARIO, DS_EMAIL, DS_SENHA) VALUES (SEQ_USUARIO.NEXTVAL, 'Pedro Oliveira', 'pedro@email.com', 'senha789');

INSERT INTO TB_LOCAL (ID_LOCAL, NM_LOCAL, DS_ENDERECO, DS_CIDADE, DS_ESTADO) VALUES (SEQ_LOCAL.NEXTVAL, 'Sede Principal', 'Rua A, 123', 'São Paulo', 'SP');
INSERT INTO TB_LOCAL (ID_LOCAL, NM_LOCAL, DS_ENDERECO, DS_CIDADE, DS_ESTADO) VALUES (SEQ_LOCAL.NEXTVAL, 'Filial 1', 'Rua B, 456', 'Rio de Janeiro', 'RJ');
INSERT INTO TB_LOCAL (ID_LOCAL, NM_LOCAL, DS_ENDERECO, DS_CIDADE, DS_ESTADO) VALUES (SEQ_LOCAL.NEXTVAL, 'Filial 2', 'Rua C, 789', 'Belo Horizonte', 'MG');

-- Bloco PL/SQL com joins e agrupamentos
DECLARE
    CURSOR c_incidentes_por_local IS
        SELECT l.NM_LOCAL, COUNT(i.ID_INCIDENTE) as total_incidentes,
               AVG(i.NR_SEVERIDADE) as media_severidade
        FROM TB_LOCAL l
        LEFT JOIN TB_INCIDENTE i ON l.ID_LOCAL = i.ID_LOCAL
        GROUP BY l.NM_LOCAL
        ORDER BY total_incidentes DESC;
BEGIN
    FOR r IN c_incidentes_por_local LOOP
        DBMS_OUTPUT.PUT_LINE('Local: ' || r.NM_LOCAL || 
                            ' - Total de Incidentes: ' || r.total_incidentes ||
                            ' - Média de Severidade: ' || ROUND(r.media_severidade, 2));
    END LOOP;
END;
/

-- Bloco PL/SQL com análise de linhas anteriores/próximas
DECLARE
    CURSOR c_incidentes IS
        SELECT i.ID_INCIDENTE, i.DS_TITULO, i.NR_SEVERIDADE,
               LAG(i.NR_SEVERIDADE) OVER (ORDER BY i.ID_INCIDENTE) as severidade_anterior,
               LEAD(i.NR_SEVERIDADE) OVER (ORDER BY i.ID_INCIDENTE) as severidade_proxima
        FROM TB_INCIDENTE i
        ORDER BY i.ID_INCIDENTE;
BEGIN
    FOR r IN c_incidentes LOOP
        DBMS_OUTPUT.PUT_LINE('ID: ' || r.ID_INCIDENTE ||
                            ' - Título: ' || r.DS_TITULO ||
                            ' - Severidade Atual: ' || r.NR_SEVERIDADE ||
                            ' - Severidade Anterior: ' || NVL(TO_CHAR(r.severidade_anterior), 'Vazio') ||
                            ' - Severidade Próxima: ' || NVL(TO_CHAR(r.severidade_proxima), 'Vazio'));
    END LOOP;
END;
/ 